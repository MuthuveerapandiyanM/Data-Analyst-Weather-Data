pip install requests

import requests

url = "https://api.tomorrow.io/v4/timelines"

# replace the location using the corresponding lat,long

#location = "20.59,-78.96" #India
location = "52.35,-1.17" #England

# replace apikey with your own API key
querystring = {"location": location, "fields": ["temperature", "humidity", "windSpeed", "windDirection", "windGust", "precipitationType", "solarGHI", "visibility", "weatherCode"],
               "units": "metric", "timesteps": "1d", "apikey": "XhleblS5tUN8zytjCNdJs180dasVeufd"}

response = requests.request("GET",url, params=querystring)

#replace the nmae based on your own preferance

with open('Englanddata.txt','w', encoding='utf8') as f:
  f.write(response.text)



import pandas as pd
import json

with open('Indiadata.txt', 'r', encoding='utf8') as f:
    India = json.load(f)
with open('Englanddata.txt', 'r', encoding='utf8') as f:
    England = json.load(f)

inter = India['data']['timelines'][0]['intervals']
India_df = pd.DataFrame([x['values'] for x in inter])
India_df

inter = England['data']['timelines'][0]['intervals']
England_df = pd.DataFrame([x['values'] for x in inter])
England_df

As you can see, the weatherCode is based on a 4-digit integer, which is not intuitive. Letâ€™s overwrite the column and map the code to the corresponding value.

weather_code_map = {0: 'Unknown',
1000: 'Clear',
1001: 'Cloudy',
1100: 'Mostly Clear',
1101: 'Partly Cloudy',
1102: 'Mostly Cloudy',
2000: 'Fog',
2100: 'Light Fog',
3000: 'Light Wind',
3001: 'Wind',
3002: 'Strong Wind',
4000: 'Drizzle',
4001: 'Rain',
4200: 'Light Rain',
4201: 'Heavy Rain',
5000: 'Snow',
5001: 'Flurries',
5100: 'Light Snow',
5101: 'Heavy Snow',
6000: 'Freezing Drizzle',
6001: 'Freezing Rain',
6200: 'Light Freezing Rain',
6201: 'Heavy Freezing Rain',
7000: 'Ice Pellets',
7101: 'Heavy Ice Pellets',
7102: 'Light Ice Pellets',
8000: 'Thunderstorm'}

India_df['weatherCode'] = [weather_code_map[x] for x in India_df['weatherCode']]
England_df['weatherCode'] = [weather_code_map[x] for x in England_df['weatherCode']]

India_df

England_df

#Obtain Statstical data

India_df.max() #Max value from each column

England_df.max()

#Compare India and England Minimum Temp

India_df['temperature'].min()

England_df['temperature'].min()



Statistical value of India

India_df.describe()

Statistical value of England

England_df.describe()

#Value Count

India_df['weatherCode'].value_counts()

England_df['weatherCode'].value_counts()

Filter Based on Certain **Condition**

India_df[India_df['weatherCode'] == 'Mostly Clear']

England_df[England_df['weatherCode'] == 'Clear']

**Data Visualization**

import matplotlib
import matplotlib.pyplot as plt


India_df['temperature'].plot.bar(xlabel = 'Day',ylabel='Temperature',color='Orange',width=0.4)

India_df['temperature'].plot.bar(x = 'weatherCode', y='temperature',xlabel = 'weaterCode',ylabel='Temperature',color='Orange',width=0.4)

barplot = pd.DataFrame({'India': India_df['temperature'], 'England': England_df['temperature']})
barplot.plot.bar(width = 0.3)

weather = dict(England_df['weatherCode'].value_counts())
series = pd.Series(weather.values(), index=weather.keys(), name="Weather")
series.plot.pie()

weather = dict(India_df['weatherCode'].value_counts())
series = pd.Series(weather.values(), index=weather.keys(), name="Weather")
series.plot.pie()

 

Q1.Find all the Unique weatherCode value in the India and England data.

India_df.nunique()

England_df.nunique()

Q2.Find the number of time when the 'weatherCode exactly clear'

India_df['weatherCode'].value_counts()

England_df['weatherCode'].value_counts()

Q3.Whats is the mean, standard Deviation and varience of humididty and temperature

India_df.humidity.mean()

England_df.humidity.mean()

India_df.temperature.mean()

England_df.temperature.mean()

India_df.humidity.std()

India_df.temperature.std()

England_df.temperature.std()

England_df.humidity.std()

India_df['temperature'].var()

India_df['humidity'].var()

England_df['temperature'].var()

England_df['temperature'].var()

Q4.Find all the null values.

India_df.isnull().sum()

England_df.isnull().sum()

Q5.Rename the Column name windSpeed int0 windSpeed in Km/hr

India_df.rename(columns={'windSpeed' : 'windSpeed in km/hr'})

Q6,Find the mean of humidity in each column

India_df.groupby('humidity').mean()

England_df.groupby('humidity').mean()
